"use strict";(self.webpackChunkkit_crocs=self.webpackChunkkit_crocs||[]).push([[265],{318:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var i=t(4848),r=t(8453);const a={sidebar_position:2},s="Guide",l={id:"guide",title:"Guide",description:"Run",source:"@site/docs/guide.md",sourceDirName:".",slug:"/guide",permalink:"/kit-docs/docs/guide",draft:!1,unlisted:!1,editUrl:"https://github.com/johnlindquist/kit-docs/tree/main/kit-crocs/docusaurus.config.ts/docs/guide.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Script Kit",permalink:"/kit-docs/docs/kit"},next:{title:"API",permalink:"/kit-docs/docs/api"}},o={},d=[{value:"Run",id:"run",level:2},{value:"Running Scripts",id:"running-scripts",level:3},{value:"Debug",id:"debug",level:2},{value:"Debugging Scripts",id:"debugging-scripts",level:3},{value:"Create",id:"create",level:2},{value:"Create a Script",id:"create-a-script",level:3},{value:"Naming a Script",id:"naming-a-script",level:3},{value:"// Shortcut Metadata",id:"-shortcut-metadata",level:3},{value:"Basics",id:"basics",level:2},{value:"Input Text with <code>await arg()</code>",id:"input-text-with-await-arg",level:3},{value:"Select From a List of Strings",id:"select-from-a-list-of-strings",level:3},{value:"Select From a List of Objects",id:"select-from-a-list-of-objects",level:3},{value:"Select from a Dynamic List",id:"select-from-a-dynamic-list",level:3},{value:"Display a Preview When Focusing a Choice",id:"display-a-preview-when-focusing-a-choice",level:3},{value:"Display HTML Beneath the Input",id:"display-html-beneath-the-input",level:3},{value:"Display Only HTML",id:"display-only-html",level:3},{value:"Style a Container",id:"style-a-container",level:3},{value:"Display HTML with CSS",id:"display-html-with-css",level:3},{value:"Display Markdown",id:"display-markdown",level:3},{value:"Set Options using Flags",id:"set-options-using-flags",level:3},{value:"Cache",id:"cache",level:2},{value:"Store Simple JSON data with db",id:"store-simple-json-data-with-db",level:3},{value:"Watch",id:"watch",level:2},{value:"Watch Files to Trigger Scripts",id:"watch-files-to-trigger-scripts",level:3},{value:"Watch a Single File",id:"watch-a-single-file",level:3},{value:"Watch a Directory",id:"watch-a-directory",level:3},{value:"Command",id:"command",level:2},{value:"Run Shell Commands",id:"run-shell-commands",level:2},{value:"Use zx to Run Shell Commands",id:"use-zx-to-run-shell-commands",level:3},{value:"Requests",id:"requests",level:2},{value:"Make HTTP Requests with get, put, post, and del",id:"make-http-requests-with-get-put-post-and-del",level:2},{value:"Make a Get Request",id:"make-a-get-request",level:3},{value:"Make a Post Request",id:"make-a-post-request",level:3},{value:"Download Files",id:"download-files",level:3},{value:"Files",id:"files",level:2},{value:"Read a Text File",id:"read-a-text-file",level:3},{value:"Create a Text File",id:"create-a-text-file",level:3},{value:"Live Edit a Text File",id:"live-edit-a-text-file",level:3},{value:"Schedule",id:"schedule",level:2},{value:"Run a Script on a Schedule",id:"run-a-script-on-a-schedule",level:3},{value:".env",id:"env",level:2},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Environment Variable Async Prompt",id:"environment-variable-async-prompt",level:3},{value:"Share",id:"share",level:2},{value:"Share as a Gist, Link, URL, or Markdown",id:"share-as-a-gist-link-url-or-markdown",level:3},{value:"Community",id:"community",level:2},{value:"Get Featured",id:"get-featured",level:3},{value:"Inspect",id:"inspect",level:2},{value:"Experiment with Data in Chrome DevTools",id:"experiment-with-data-in-chrome-devtools",level:3},{value:"Metadata",id:"metadata",level:2},{value:"// Shortcode Metadata",id:"-shortcode-metadata",level:3},{value:"Tips",id:"tips",level:2},{value:"Quick Submit from Hint",id:"quick-submit-from-hint",level:3},{value:"Quick Submit from Choice",id:"quick-submit-from-choice",level:3},{value:"Run Scripts from Other Apps",id:"run-scripts-from-other-apps",level:3},{value:"Path",id:"path",level:2},{value:"Select a Path",id:"select-a-path",level:3},{value:"Select a Path with Options",id:"select-a-path-with-options",level:3},{value:"Select from Finder Prompts",id:"select-from-finder-prompts",level:3},{value:"Terminal",id:"terminal",level:2},{value:"Built-in Terminal",id:"built-in-terminal",level:3},{value:"Editor",id:"editor",level:2},{value:"Built-in Editor",id:"built-in-editor",level:3},{value:"Load Text in the Editor",id:"load-text-in-the-editor",level:3},{value:"Config",id:"config",level:2},{value:"Add ~/.kit/bin to $PATH",id:"add-kitbin-to-path",level:3},{value:"Required Permissions for Features",id:"required-permissions-for-features",level:3},{value:"Submit",id:"submit",level:2},{value:"Submit From Live Data",id:"submit-from-live-data",level:3},{value:"Strict Mode",id:"strict-mode",level:3},{value:"Tips",id:"tips-1",level:2},{value:"Quick Keys",id:"quick-keys",level:3},{value:"Widget",id:"widget",level:2},{value:"Create a Widget",id:"create-a-widget",level:3},{value:"Position a Widget on Screen",id:"position-a-widget-on-screen",level:3},{value:"Advanced Prompt",id:"advanced-prompt",level:2},{value:"Update on Input",id:"update-on-input",level:3},{value:"Git",id:"git",level:2},{value:"Clone Git Repos with degit",id:"clone-git-repos-with-degit",level:3},{value:"Log",id:"log",level:2},{value:"View Logs",id:"view-logs",level:3},{value:"Save webpage as a PDF",id:"save-webpage-as-a-pdf",level:3},{value:"Take screenshot of webpage",id:"take-screenshot-of-webpage",level:3},{value:"Scrape content from a webpage",id:"scrape-content-from-a-webpage",level:3},{value:"Contribute",id:"contribute",level:2},{value:"Missing Something?",id:"missing-something",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"guide",children:"Guide"}),"\n",(0,i.jsx)(n.h2,{id:"run",children:"Run"}),"\n",(0,i.jsx)(n.h3,{id:"running-scripts",children:"Running Scripts"}),"\n",(0,i.jsxs)(n.p,{children:["Press ",(0,i.jsx)(n.code,{children:"cmd+;"})," (or ",(0,i.jsx)(n.code,{children:"ctrl+;"})," on Windows) to open the Script Kit prompt. Search for the script you want to run and press ",(0,i.jsx)(n.code,{children:"enter"})," to run it."]}),"\n",(0,i.jsx)(n.p,{children:'You can also open the prompt from the menu bar and select "Open Prompt."'}),"\n",(0,i.jsx)(n.h2,{id:"debug",children:"Debug"}),"\n",(0,i.jsx)(n.h3,{id:"debugging-scripts",children:"Debugging Scripts"}),"\n",(0,i.jsxs)(n.p,{children:["With the prompt open, run a script with ",(0,i.jsx)(n.code,{children:"cmd+enter"})," (",(0,i.jsx)(n.code,{children:"ctrl+enter"})," on Windows) to launch the script in debug mode. An inspector will appear alongside the script, allowing you to inspect current values and step through it line by line. Use the ",(0,i.jsx)(n.code,{children:"debugger"})," statement anywhere in your script to create a breakpoint where your script will pause. (When running the script normally, the ",(0,i.jsx)(n.code,{children:"debugger"})," statement is simply ignored.)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'let response = await get("https://api.github.com/repos/johnlindquist/kit")\r\n\r\n// The inspector will pause your script so you can examine the value of "response""\r\ndebugger\n'})}),"\n",(0,i.jsx)(n.h2,{id:"create",children:"Create"}),"\n",(0,i.jsx)(n.h3,{id:"create-a-script",children:"Create a Script"}),"\n",(0,i.jsxs)(n.p,{children:["Keep your scripts in ",(0,i.jsx)(n.code,{children:"~/.kenv/scripts"}),' ("kenv" stands for "Kit Environment").']}),"\n",(0,i.jsx)(n.p,{children:"With the Kit.app prompt open, start typing the name of the script you want to create, then hit `enter`` when prompted to create a script. Your editor will launch with the newly created script focused."}),"\n",(0,i.jsxs)(n.p,{children:["Kit.app continuously watches the ",(0,i.jsx)(n.code,{children:"~/.kenv/scripts"})," directory for changes. Creating, deleting, or modifying scripts will be automatically reflected in the Kit.app prompt."]}),"\n",(0,i.jsx)(n.h3,{id:"naming-a-script",children:"Naming a Script"}),"\n",(0,i.jsxs)(n.p,{children:["The file name of the script is lowercased and dashed like ",(0,i.jsx)(n.code,{children:"hello-world.js"})," by convention. You can add an addionational ",(0,i.jsx)(n.code,{children:"//Name: Hello World"})," to the top of your script for a more friendly name to appear when searching in the prompt."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"//Name: Hello World\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When creating a script with the prompt, you can type the ",(0,i.jsx)(n.code,{children:"Friendly Name"})," of the script and Kit.app will automatically create the dashed file name for you."]}),"\n",(0,i.jsx)(n.h3,{id:"-shortcut-metadata",children:"// Shortcut Metadata"}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.code,{children:"// Shortcut"})," metadata to add a global keyboard shortcut to any script"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Shortcut: cmd shift j\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nsay(`You pressed command shift j`)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Shortcut: opt i\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nsay(`You pressed option i`)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"basics",children:"Basics"}),"\n",(0,i.jsxs)(n.h3,{id:"input-text-with-await-arg",children:["Input Text with ",(0,i.jsx)(n.code,{children:"await arg()"})]}),"\n",(0,i.jsxs)(n.p,{children:["The simplest form of input you can accept from a user is an ",(0,i.jsx)(n.code,{children:"arg()"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Input Text\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet name = await arg("Enter your name")\r\n\r\nawait div(md(`Hello, ${name}`))\n'})}),"\n",(0,i.jsx)(n.h3,{id:"select-from-a-list-of-strings",children:"Select From a List of Strings"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Select From a List\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet fruit = await arg("Pick a fruit", [\r\n  "Apple",\r\n  "Banana",\r\n  "Cherry",\r\n])\r\n\r\nawait div(md(`You selected ${fruit}`))\n'})}),"\n",(0,i.jsx)(n.h3,{id:"select-from-a-list-of-objects",children:"Select From a List of Objects"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Select From a List of Objects\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet { size, weight } = await arg("Select a Fruit", [\r\n  {\r\n    name: "Apple",\r\n    description: "A shiny red fruit",\r\n    // add any properties to "value"\r\n    value: {\r\n      size: "small",\r\n      weight: 1,\r\n    },\r\n  },\r\n  {\r\n    name: "Banana",\r\n    description: "A long yellow fruit",\r\n    value: {\r\n      size: "medium",\r\n      weight: 2,\r\n    },\r\n  },\r\n])\r\n\r\nawait div(\r\n  md(\r\n    `You selected a fruit with size: ${size} and weight: ${weight}`\r\n  )\r\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"select-from-a-dynamic-list",children:"Select from a Dynamic List"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Select From a Dynamic List\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nawait arg("Select a Star Wars Character", async () => {\r\n  // Get a list of people from the swapi api\r\n  let response = await get("https://swapi.dev/api/people/")\r\n\r\n  return response?.data?.results.map(p => p.name)\r\n})\n'})}),"\n",(0,i.jsx)(n.h3,{id:"display-a-preview-when-focusing-a-choice",children:"Display a Preview When Focusing a Choice"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Display a Preview When Focusing a Choice\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet heights = [320, 480, 640]\r\nlet choices = heights.map(h => {\r\n  return {\r\n    name: `Kitten height: ${h}`,\r\n    preview: () =>\r\n      `<img class="w-full" src="http://placekitten.com/640/${h}">`,\r\n    value: h,\r\n  }\r\n})\r\n\r\nlet height = await arg("Select a Kitten", choices)\r\n\r\nawait div(md(`You selected ${height}`))\n'})}),"\n",(0,i.jsx)(n.h3,{id:"display-html-beneath-the-input",children:"Display HTML Beneath the Input"}),"\n",(0,i.jsxs)(n.p,{children:["If the second argument to ",(0,i.jsx)(n.code,{children:"arg()"})," is a string, it will be displayed beneath the input as HTML."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Just a string\r\nawait arg(\r\n  "Select a fruit",\r\n  md(`I recommend typing "Apple"`) // "md" converts strings to HTML\r\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["A function that returns a string will also be displayed beneath the input as HTML. You can use the ",(0,i.jsx)(n.code,{children:"input"})," text in the function to create dynamic HTML."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// A function, takes typed "input", returns string\r\nawait arg("Select a fruit", input =>\r\n  md(`You typed "${input}"`)\r\n)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// An async function, takes typed "input", returns string\r\n// `hightlight` requires "async" takes markdown, applies code highlighting\r\n\r\nawait arg(\r\n  "Select a fruit",\r\n  async input =>\r\n    await highlight(` \r\n~~~js\r\nawait arg("${input}")\r\n~~~\r\n  `)\r\n)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Dynamic choices, static preview\r\nawait arg(\r\n  {\r\n    preview: async () =>\r\n      await highlight(`\r\n## This is just information\r\n\r\n\x3c!-- value: https://github.com/johnlindquist/kit-docs/blob/main/GUIDE.md --\x3e\r\n\r\nUsually to help you make a choice\r\n  \r\nJust type some text to see the choices update\r\n`),\r\n  },\r\n  async input => {\r\n    return Array.from({ length: 10 }).map(\r\n      (_, i) => `${input} ${i}`\r\n    )\r\n  }\r\n)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"display-only-html",children:"Display Only HTML"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"await div('')"})," to display HTML."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Display HTML\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nawait div(`<h1>Hello World</h1>`)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"style-a-container",children:"Style a Container"}),"\n",(0,i.jsxs)(n.p,{children:["The second argument of ",(0,i.jsx)(n.code,{children:"div"})," allows you to add ",(0,i.jsx)(n.a,{href:"https://tailwindcss.com/",children:"tailwind"})," classes to the container of your html. For example, ",(0,i.jsx)(n.code,{children:"p-5"})," will add a ",(0,i.jsx)(n.code,{children:"padding: 1.25rem;"})," to the container."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"await div(`<h1>Hi</h1>`, `p-5`)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"display-html-with-css",children:"Display HTML with CSS"}),"\n",(0,i.jsxs)(n.p,{children:["Script Kit bundles ",(0,i.jsx)(n.a,{href:"https://tailwindcss.com/",children:"Tailwind CSS"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Display HTML with CSS\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nawait div(\r\n  `<h1 class="p-10 text-4xl text-center">Hello World</h1>`\r\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"display-markdown",children:"Display Markdown"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"md()"})," function will convert Markdown into HTML that you can pass into div. It will also add the default Tailwind styles so you won't have to think about formatting."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Display Markdown\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet html = md(`# Hello World`)\r\n\r\nawait div(html)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"set-options-using-flags",children:"Set Options using Flags"}),"\n",(0,i.jsxs)(n.p,{children:["To add an options menu to your choices, you must provide a ",(0,i.jsx)(n.code,{children:"flags"})," object. If one of the keyboard shortcuts are hit, or the user selects the option, then the ",(0,i.jsx)(n.code,{children:"flag"})," global will have the matching key from your flags set to ",(0,i.jsx)(n.code,{children:"true"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'let urls = [\r\n  "https://scriptkit.com",\r\n  "https://egghead.io",\r\n  "https://johnlindquist.com",\r\n]\r\n\r\nlet flags = {\r\n  open: {\r\n    name: "Open",\r\n    shortcut: "cmd+o",\r\n  },\r\n  copy: {\r\n    name: "Copy",\r\n    shortcut: "cmd+c",\r\n  },\r\n}\r\n\r\nlet url = await arg(\r\n  { placeholder: `Press \'right\' to see menu`, flags },\r\n  urls\r\n)\r\n\r\nif (flag?.open) {\r\n  $`open ${url}`\r\n} else if (flag?.copy) {\r\n  copy(url)\r\n} else {\r\n  console.log(url)\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Using the same script above, In the terminal, you would pass an open flag like so:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"my-sites --open\n"})}),"\n",(0,i.jsx)(n.h2,{id:"cache",children:"Cache"}),"\n",(0,i.jsx)(n.h3,{id:"store-simple-json-data-with-db",children:"Store Simple JSON data with db"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"db"})," helpers reads/writes to json files in the ",(0,i.jsx)(n.code,{children:"~/.kenv/db"})," directory. It's meant as a simple wrapper around common json operations."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Menu: Database Read/Write Example\r\n// Description: Add/remove items from a list of fruit\r\n\r\nlet fruitDb = await db(["apple", "banana", "orange"])\r\n\r\n// This will keep prompting until you hit Escape\r\nwhile (true) {\r\n  let fruitToAdd = await arg(\r\n    {\r\n      placeholder: "Add a fruit",\r\n      //allows to submit input not in the list\r\n      strict: false,\r\n    },\r\n    fruitDb.items\r\n  )\r\n\r\n  fruitDb.items.push(fruitToAdd)\r\n  await fruitDb.write()\r\n\r\n  let fruitToDelete = await arg(\r\n    "Delete a fruit",\r\n    fruitDb.items\r\n  )\r\n\r\n  fruitDb.items = fruitDb.items.filter(\r\n    fruit => fruit !== fruitToDelete\r\n  )\r\n\r\n  await fruitDb.write()\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This db helper can also be used as a simple Key/value Store like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Menu: Database Read/Write Example 2\r\n// Description: Use 'db' helper as Key/Value Store\r\n\r\n// Open the json file with the same name as the script file, the data in the param is the default, \r\n// which will be used when the db file is opened the first time\r\nconst scriptDB = await db({hello: 'World'});\r\n\r\n// Note: This db read here should only make sure the db object has the latest content from disk. \r\n// It may be unnecessary directly after opening the db object. \r\nawait scriptDB.read();\r\n\r\nif (scriptDB.data.hello === 'World') {\r\n    // change value in your db\r\n    scriptDB.data.hello = 'Bob';\r\n} else {\r\n    // change value back in your db\r\n    scriptDB.data.hello = 'World';\r\n}\r\n\r\nawait scriptDB.write();\r\n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"watch",children:"Watch"}),"\n",(0,i.jsx)(n.h3,{id:"watch-files-to-trigger-scripts",children:"Watch Files to Trigger Scripts"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"// Watch"})," metadata enables you to watch for changes to a file on your system."]}),"\n",(0,i.jsx)(n.h3,{id:"watch-a-single-file",children:"Watch a Single File"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Speak File\r\n// Watch: ~/speak.txt\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet speakPath = home("speak.txt")\r\n\r\ntry {\r\n  let content = await readFile(speakPath, "utf-8")\r\n  if (content.length < 60) {\r\n    // We don\'t want `say` to run too long \ud83d\ude05\r\n    say(content)\r\n  }\r\n} catch (error) {\r\n  log(error)\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"watch-a-directory",children:"Watch a Directory"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"// Watch"})," metadata uses ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/chokidar",children:"Chokidar"})," under the hood, so it supports the same glob patterns. Please use cautiously, as this can cause a lot of scripts to run at once."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Download Log\r\n// Watch: ~/Downloads/*\r\n\r\nimport "@johnlindquist/kit"\r\n\r\n// These are optional and automatically set by the watcher\r\nlet filePath = await arg()\r\nlet event = await arg()\r\n\r\nif (event === "add") {\r\n  await appendFile(home("download.log"), filePath + "\\n")\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"command",children:"Command"}),"\n",(0,i.jsx)(n.h2,{id:"run-shell-commands",children:"Run Shell Commands"}),"\n",(0,i.jsx)(n.h3,{id:"use-zx-to-run-shell-commands",children:"Use zx to Run Shell Commands"}),"\n",(0,i.jsxs)(n.p,{children:["Script Kit bundles ",(0,i.jsx)(n.a,{href:"https://github.com/google/zx",children:"zx"})," as the global ",(0,i.jsx)(n.code,{children:"$"})]}),"\n",(0,i.jsxs)(n.p,{children:["Here's an example from their docs (make sure to ",(0,i.jsx)(n.code,{children:"cd"})," to the proper dir)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'await $`cat package.json | grep name`\r\n\r\nlet branch = await $`git branch --show-current`\r\nawait $`dep deploy --branch=${branch}`\r\n\r\nawait Promise.all([\r\n  $`sleep 1; echo 1`,\r\n  $`sleep 2; echo 2`,\r\n  $`sleep 3; echo 3`,\r\n])\r\n\r\nlet name = "foo bar"\r\nawait $`mkdir /tmp/${name}`\n'})}),"\n",(0,i.jsx)(n.h2,{id:"requests",children:"Requests"}),"\n",(0,i.jsx)(n.h2,{id:"make-http-requests-with-get-put-post-and-del",children:"Make HTTP Requests with get, put, post, and del"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"get"}),", ",(0,i.jsx)(n.code,{children:"post"}),", ",(0,i.jsx)(n.code,{children:"put"}),", and ",(0,i.jsx)(n.code,{children:"del"})," methods use the ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/axios",children:"axios"})," API"]}),"\n",(0,i.jsx)(n.h3,{id:"make-a-get-request",children:"Make a Get Request"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Get Example\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet response = await get(\r\n  "https://scriptkit.com/api/get-example"\r\n)\r\n\r\nawait div(md(response.data.message))\n'})}),"\n",(0,i.jsx)(n.h3,{id:"make-a-post-request",children:"Make a Post Request"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Post Example\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet response = await post(\r\n  "https://scriptkit.com/api/post-example",\r\n  {\r\n    name: await arg("Enter your name"),\r\n  }\r\n)\r\n\r\nawait div(md(response.data.message))\n'})}),"\n",(0,i.jsx)(n.h3,{id:"download-files",children:"Download Files"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"download"})," to download a file from a url:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Download a File\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet url = "https://www.scriptkit.com/assets/logo.png"\r\nlet buffer = await download(url)\r\n\r\nlet fileName = path.basename(url)\r\nlet filePath = home(fileName)\r\n\r\nawait writeFile(filePath, buffer)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"files",children:"Files"}),"\n",(0,i.jsx)(n.h3,{id:"read-a-text-file",children:"Read a Text File"}),"\n",(0,i.jsxs)(n.p,{children:["You can use ",(0,i.jsx)(n.code,{children:"readFile"})," to read a text file from your system:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Read a Text File\r\n\r\nimport "@johnlindquist/kit"\r\n\r\n// Download a readme for the sake of the example\r\nlet fileUrl = `https://raw.githubusercontent.com/johnlindquist/kit/main/README.md`\r\nlet filePath = home("README.md")\r\nlet buffer = await download(fileUrl)\r\nawait writeFile(filePath, buffer)\r\n\r\n// Read the file\r\nlet contents = await readFile(filePath, "utf-8")\r\nawait editor(contents)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"create-a-text-file",children:"Create a Text File"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Create a Text File\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet filePath = await path() // Select a path that doesn\'t exist\r\n\r\nlet exists = await pathExists(filePath)\r\n\r\nif (!exists) {\r\n  await writeFile(filePath, "Hello world")\r\n} else {\r\n  await div(md(`${filePath} already exists...`))\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"live-edit-a-text-file",children:"Live Edit a Text File"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Update a Text File\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet filePath = home(`my-notes.md`)\r\n\r\n// `ensureReadFile` will create the file with the content\r\n// if it doesn\'t exist\r\nlet content = await ensureReadFile(filePath, "Hello world")\r\n\r\nawait editor({\r\n  value: content,\r\n  onInput: debounce(async input => {\r\n    await writeFile(filePath, input)\r\n  }, 200),\r\n})\n'})}),"\n",(0,i.jsx)(n.h2,{id:"schedule",children:"Schedule"}),"\n",(0,i.jsx)(n.h3,{id:"run-a-script-on-a-schedule",children:"Run a Script on a Schedule"}),"\n",(0,i.jsx)(n.p,{children:"Use cron syntax to run scripts on a schedule. The following example will show a notification to stand up and stretch every 15 minutes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Stand Up and Stretch\r\n// Schedule: */15 * * * *\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nnotify(`Stand up and stretch`)\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://crontab.guru/",children:"Crontab.guru"})," is a great utility to help generate and understand cron syntax."]}),"\n",(0,i.jsx)(n.h2,{id:"env",children:".env"}),"\n",(0,i.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"env"})," helper will read environment variables from ~/.kenv/.env. If the variable doesn't exist, it will prompt you to create it."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Env Example\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet KEY = await env("MY_KEY")\r\n\r\nawait div(md(`You loaded ${KEY} from ~/.kenv/.env`))\n'})}),"\n",(0,i.jsx)(n.h3,{id:"environment-variable-async-prompt",children:"Environment Variable Async Prompt"}),"\n",(0,i.jsxs)(n.p,{children:["If you pass a function as the second argument to ",(0,i.jsx)(n.code,{children:"env"}),", it will only be called if the variable doesn't exist.\r\nThis allows you to set Enviroment Variables from a list, an API, or any other data source."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Choose an Environment Variable\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet MY_API_USER = await env("MY_API_USER", async () => {\r\n  return await arg("Select a user for your API", [\r\n    "John",\r\n    "Mindy",\r\n    "Joy",\r\n  ])\r\n})\r\n\r\nawait div(\r\n  md(\r\n    `You selected ${MY_API_USER}. Running this script again will remember your choice`\r\n  )\r\n)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"share",children:"Share"}),"\n",(0,i.jsx)(n.h3,{id:"share-as-a-gist-link-url-or-markdown",children:"Share as a Gist, Link, URL, or Markdown"}),"\n",(0,i.jsx)(n.p,{children:"The Script Kit main window also includes many other share options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Share as Gist ",(0,i.jsx)("kbd",{children:"cmd+g"}),": Creates as Gist of the selected script, then copies the URL to the clipboard"]}),"\n",(0,i.jsxs)(n.li,{children:["Share as Link ",(0,i.jsx)("kbd",{children:"opt+s"}),": Creates a private installable kit://link to the selected script, then copies the URL to the clipboard. These links are very long as they encode the entire script into the URL."]}),"\n",(0,i.jsxs)(n.li,{children:["Share as URL ",(0,i.jsx)("kbd",{children:"opt+u"}),": Creates a Gist of the selected script, then copies an installable public URL to the clipboard"]}),"\n",(0,i.jsxs)(n.li,{children:["Share as Markdown ",(0,i.jsx)("kbd",{children:"cmd+m"}),": Copies the selected script as a Markdown snippet to the clipboard"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"community",children:"Community"}),"\n",(0,i.jsx)(n.h3,{id:"get-featured",children:"Get Featured"}),"\n",(0,i.jsx)(n.p,{children:"Featured scripts are displayed in:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"Community"})," tab of the Script Kit main window"]}),"\n",(0,i.jsxs)(n.li,{children:["On the ",(0,i.jsx)(n.a,{href:"https://www.scriptkit.com/scripts",children:"Community Scripts"})," page"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["To get featured, post your script to the ",(0,i.jsx)(n.a,{href:"https://github.com/johnlindquist/kit/discussions/categories/share",children:"Script Kit Github discussions Share page"}),". With a script focused in the Script Kit main window, you can press right or ",(0,i.jsx)("kbd",{children:"cmd+k"})," to bring up a share menu which will automatically walk you through creating a shareable post for the script."]}),"\n",(0,i.jsxs)(n.p,{children:["As a shortcut, hit ",(0,i.jsx)("kbd",{children:"cmd+s"}),' with a script selected to automatically run the "Share as Discussion" process.']}),"\n",(0,i.jsx)(n.h2,{id:"inspect",children:"Inspect"}),"\n",(0,i.jsx)(n.h3,{id:"experiment-with-data-in-chrome-devtools",children:"Experiment with Data in Chrome DevTools"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Play with Data in Chrome DevTools\r\n\r\nimport "@johnlindquist/kit"\r\n\r\n// Will open a standalone Chrome DevTools window\r\n// The object passed in will be displayed\r\n// You can access the object using `x`, e.g., `x.message` will be `Hello world`\r\ndev({\r\n  message: "Hello world",\r\n})\n'})}),"\n",(0,i.jsx)(n.h2,{id:"metadata",children:"Metadata"}),"\n",(0,i.jsx)(n.h3,{id:"-shortcode-metadata",children:"// Shortcode Metadata"}),"\n",(0,i.jsx)(n.p,{children:"A shortcode allows you quickly run a script without needing to search for it."}),"\n",(0,i.jsxs)(n.p,{children:["To trigger a ",(0,i.jsx)(n.code,{children:"// Shortcode"}),", type the string of characters from the main menu, then hit ",(0,i.jsx)(n.code,{children:"spacebar"}),". In this example, you would type ",(0,i.jsx)(n.code,{children:"oi"})," then ",(0,i.jsx)(n.code,{children:"spacebar"})," to run this script:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Shortcode: oi\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nsay(`You pressed option i`)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"tips",children:"Tips"}),"\n",(0,i.jsx)(n.h3,{id:"quick-submit-from-hint",children:"Quick Submit from Hint"}),"\n",(0,i.jsx)(n.p,{children:"A common pattern from Terminal is to quickly submit a script from a hint. Using a bracket around a single character will submit that character when pressed."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'import "@johnlindquist/kit"\r\n\r\nlet value = await arg({\r\n  placeholder: "Continue?",\r\n  hint: `Another [y]/[n]`,\r\n})\r\n\r\nif (value === "y") {\r\n  say(`You pressed y`)\r\n} else {\r\n  say(`You pressed n`)\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"quick-submit-from-choice",children:"Quick Submit from Choice"}),"\n",(0,i.jsx)(n.p,{children:"If you need to provide a little more information to the user, use a choice instead of a hint. This allows you to provide a full value that will be submitted instead of just the single letter."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'import "@johnlindquist/kit"\r\n\r\nlet value = await arg("Select a food", [\r\n  {\r\n    name: "[a]pple",\r\n    value: "apple",\r\n  },\r\n  {\r\n    name: "[b]anana",\r\n    value: "banana",\r\n  },\r\n  {\r\n    name: "[c]heese",\r\n    value: "cheese",\r\n  },\r\n])\r\n\r\nawait div(md(value))\n'})}),"\n",(0,i.jsx)(n.h3,{id:"run-scripts-from-other-apps",children:"Run Scripts from Other Apps"}),"\n",(0,i.jsx)(n.p,{children:"Are you a fan of one of these amazing tools?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.keyboardmaestro.com/main/",children:"Keyboard Maestro"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://folivora.ai/",children:"Better Touch Tool"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://karabiner-elements.pqrs.org/",children:"Karabiner"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.raycast.com/",children:"Raycast"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.alfredapp.com/",children:"Alfred"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"We love all these tools! So we made sure the scripts you create in Script Kit can be invoked by them too:"}),"\n",(0,i.jsxs)(n.p,{children:["If you have a script named ",(0,i.jsx)(n.code,{children:"center-app"}),', then you can paste the following snippet into the "scripts" section of any of these tools.']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"~/.kit/kar center-app\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"kar"})," is an executable that takes the script name and sends it to Kit.app to run."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["It's named ",(0,i.jsx)(n.code,{children:"kar"})," because we're HUGE fans of  ",(0,i.jsx)(n.a,{href:"https://karabiner-elements.pqrs.org/",children:"karabiner"}),' and using "kit kar" as a transport\r\nfor scripts into the app makes us giggle \ud83d\ude07']}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Any arguments you pass to the script will also be sent along. So if you want to run ",(0,i.jsx)(n.code,{children:"center-app"})," with a padding of ",(0,i.jsx)(n.code,{children:"50"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"~/.kit/kar center-app 50\n"})}),"\n",(0,i.jsx)(n.h2,{id:"path",children:"Path"}),"\n",(0,i.jsx)(n.h3,{id:"select-a-path",children:"Select a Path"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Select a Path\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet filePath = await path()\r\n\r\nawait div(md(`You selected ${filePath}`))\n'})}),"\n",(0,i.jsx)(n.h3,{id:"select-a-path-with-options",children:"Select a Path with Options"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Select a Path with Options\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nawait path({\r\n  hint: `Select a path containing JS files`,\r\n  onlyDirs: true,\r\n  onChoiceFocus: async (input, { focused }) => {\r\n    let focusedPath = focused.value\r\n    try {\r\n      let files = await readdir(focusedPath)\r\n      let hasJS = files.find(f => f.endsWith(".js"))\r\n\r\n      setPreview(\r\n        md(\r\n          `${\r\n            hasJS ? "\u2705 Found" : "\ud83d\udd34 Didn\'t find"\r\n          } JS files`\r\n        )\r\n      )\r\n    } catch (error) {\r\n      log(error)\r\n    }\r\n  },\r\n})\n'})}),"\n",(0,i.jsx)(n.h3,{id:"select-from-finder-prompts",children:"Select from Finder Prompts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Select from Finder Prompt\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet filePath = await selectFile()\r\n\r\nlet folderPath = await selectFolder()\r\n\r\nawait div(md(`You selected ${filePath} and ${folderPath}`))\n'})}),"\n",(0,i.jsx)(n.h2,{id:"terminal",children:"Terminal"}),"\n",(0,i.jsx)(n.h3,{id:"built-in-terminal",children:"Built-in Terminal"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Run Commands in the Terminal\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nawait term({\r\n  //defaults to home dir\r\n  cwd: `~/.kenv/scripts`,\r\n  command: `ls`,\r\n})\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["The shell defaults to ",(0,i.jsx)(n.code,{children:"zsh"}),". You can change your shell by setting the ",(0,i.jsx)(n.code,{children:"KIT_SHELL"})," environment variable in the ~/kenv/.env, but most of the testing has been done with ",(0,i.jsx)(n.code,{children:"zsh"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"editor",children:"Editor"}),"\n",(0,i.jsx)(n.h3,{id:"built-in-editor",children:"Built-in Editor"}),"\n",(0,i.jsxs)(n.p,{children:["Script Kit ships with a built-in version of the Monaco editor. Use ",(0,i.jsx)(n.code,{children:"await editor()"})," to switch to the editor prompt."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Editor Example\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet result = await editor()\r\n\r\nawait div(md(result))\n'})}),"\n",(0,i.jsx)(n.h3,{id:"load-text-in-the-editor",children:"Load Text in the Editor"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Name: Load Text Into the Editor\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet { data } = await get(\r\n  `https://raw.githubusercontent.com/johnlindquist/kit/main/README.md`\r\n)\r\n\r\nlet result = await editor({\r\n  value: data,\r\n  // Supports "css", "js", "ts", "md", "properties". "md" is default. More language support coming in future releases.\r\n  language: "md",\r\n  footer: `Hit cmd+s to continue...`,\r\n})\r\n\r\nawait div(md(result))\n'})}),"\n",(0,i.jsx)(n.h2,{id:"config",children:"Config"}),"\n",(0,i.jsx)(n.h3,{id:"add-kitbin-to-path",children:"Add ~/.kit/bin to $PATH"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["This is similar to VS Code's \"Add ",(0,i.jsx)(n.code,{children:"code"}),' to path"']}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You can run the ",(0,i.jsx)(n.code,{children:"kit"})," CLI from your terminal with"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"~/.kit/bin/kit\n"})}),"\n",(0,i.jsx)(n.p,{children:"but this option will allow you run the CLI with:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"kit\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["If you're familiar with adding to your ",(0,i.jsx)(n.code,{children:".zshrc"}),", just add ",(0,i.jsx)(n.code,{children:"~/.kit/bin"})," to your PATH."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"kit"})," CLI will allow you to run, edit, etc scripts from your terminal."]}),"\n",(0,i.jsx)(n.h3,{id:"required-permissions-for-features",children:"Required Permissions for Features"}),"\n",(0,i.jsx)(n.p,{children:"Kit.app requires accessibility permission for the following reasons:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Watch user input to trigger Snippets and Clipboard History"}),"\n",(0,i.jsxs)(n.li,{children:["Send keystrokes to trigger for ",(0,i.jsx)(n.code,{children:"setSelectedText"}),", ",(0,i.jsx)(n.code,{children:"getSelectedText"}),", ",(0,i.jsx)(n.code,{children:"keyboard.type"})," and others"]}),"\n",(0,i.jsx)(n.li,{children:"In the future, recording Macros, mouse actions, and more"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\u2757\ufe0f ",(0,i.jsx)(n.strong,{children:"You must quit Kit.app and re-open it for changes to take effect."})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-images.githubusercontent.com/36073/174673600-59020e49-be04-4786-81f7-5bbe20a9ce6c.png",alt:"osx preferences panel"})}),"\n",(0,i.jsx)(n.h2,{id:"submit",children:"Submit"}),"\n",(0,i.jsx)(n.h3,{id:"submit-from-live-data",children:"Submit From Live Data"}),"\n",(0,i.jsxs)(n.p,{children:["Some scenarios require ",(0,i.jsx)(n.code,{children:"setInterval"}),' or other "live data" utils. This means you can\'t use ',(0,i.jsx)(n.code,{children:"await"})," on the arg/div/textarea/etc because ",(0,i.jsx)(n.code,{children:"await"})," prevents the script from continuing on to start the ",(0,i.jsx)(n.code,{children:"setInterval"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-images.githubusercontent.com/36073/143775792-34c1fb15-21b9-4690-b8e2-23e1447f65e5.gif",alt:"CleanShot 2021-11-28 at 08 58 04"})}),"\n",(0,i.jsxs)(n.p,{children:["Use the Promise ",(0,i.jsx)(n.code,{children:"then"})," on arg/div/textarea/etc to allow the script to continue to run to the ",(0,i.jsx)(n.code,{children:"setInterval"}),". Inside of the ",(0,i.jsx)(n.code,{children:"then"})," callback, you will have to clear the interval for your script to continue/complete:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"let intervalId = 0\r\ndiv(md(`Click a value`)).then(async value => {\r\n  clearInterval(intervalId)\r\n\r\n  await div(md(value))\r\n})\r\n\r\nintervalId = setInterval(() => {\r\n  let value = Math.random()\r\n\r\n  setPanel(\r\n    md(`\r\n  [${value}](submit:${value})\r\n  `)\r\n  )\r\n}, 1000)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"strict-mode",children:"Strict Mode"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"strict"})," is enabled by default and it forces the user to pick an item from the list, preventing them from entering their own text."]}),"\n",(0,i.jsxs)(n.p,{children:["When you disabled ",(0,i.jsx)(n.code,{children:"strict"}),", if you type something that eliminates the entire list, then hit ",(0,i.jsx)("kbd",{children:"Enter"}),", the string from the input will be passed back."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Note: If the list values are Objects and the user inputs a String, you will need to handle either type being returned"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// If the list is completely filtered, hitting enter does nothing.\r\nlet fruit = await arg(`You can only pick one`, [\r\n  `Apple`,\r\n  `Banana`,\r\n  `Orange`,\r\n])\r\n\r\n// If the list is completely filtered, hitting enter sends whatever\r\n// is currently in the input.\r\nlet fruitOrInput = await arg(\r\n  {\r\n    placeholder: `Pick a fruit or type anything`,\r\n    strict: false,\r\n  },\r\n  [`Apple`, `Banana`, `Orange`]\r\n)\r\n\r\nawait textarea(`${fruit} and ${fruitOrInput}`)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"tips-1",children:"Tips"}),"\n",(0,i.jsx)(n.h3,{id:"quick-keys",children:"Quick Keys"}),"\n",(0,i.jsx)(n.p,{children:"A quick key allows you to bind a single key to submit a prompt."}),"\n",(0,i.jsx)(n.p,{children:'You can add quick keys inside the "hint" if you don\'t want to bother with choices:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'//Type "y" or "n"\r\nlet confirm = await arg({\r\n  placeholder: "Eat a taco?",\r\n  hint: `[y]es/[n]o`,\r\n})\r\n\r\nconsole.log(confirm) //"y" or "n"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Otherwise, add the quick keys in the ",(0,i.jsx)(n.code,{children:"name"})," of the choices and it will return the quick key:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:' // Type "a", "b", or "g"\r\nlet fruit = await arg(`Pick one`, [\r\n  `An [a]pple`,\r\n  `A [b]anana`,\r\n  `a [g]rape`,\r\n])\r\n\r\nconsole.log(fruit) //"a", "b", or "g"\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can add a value, then typing the quick key will return the value:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Type "c" or "a"\r\nlet vegetable = await arg("Pick a veggie", [\r\n  { name: "[C]elery", value: "Celery" },\r\n  { name: "C[a]rrot", value: "Carrot" },\r\n])\r\n\r\nconsole.log(vegetable) //"Celery" or "Carrot"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"widget",children:"Widget"}),"\n",(0,i.jsx)(n.h3,{id:"create-a-widget",children:"Create a Widget"}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.code,{children:"widget"})," method to spawn a new, persisting window that is disconnected from the script."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'await widget(`\r\n<div class="bg-black text-white h-screen p-5">\r\n    Hello there!\r\n<div>\r\n\r\n`)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"position-a-widget-on-screen",children:"Position a Widget on Screen"}),"\n",(0,i.jsxs)(n.p,{children:["You can control the size/position of each ",(0,i.jsx)(n.code,{children:"show"})," window you create, but you'll need some info from the current screen (especially with a multi-monitor setup!) to be able to position the window where you want it:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'let width = 480\r\nlet height = 320\r\n\r\nlet { workArea } = await getActiveScreen()\r\nlet { x, y, width: workAreaWidth } = workArea\r\n\r\nawait widget(\r\n  md(`\r\n# I\'m in the top right of the current screen!\r\n\r\n<div class="flex justify-center text-9xl">\r\n\ud83d\ude18\r\n</div>\r\n`),\r\n  {\r\n    width,\r\n    height,\r\n    x: x + workAreaWidth - width,\r\n    y: y,\r\n  }\r\n)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-prompt",children:"Advanced Prompt"}),"\n",(0,i.jsx)(n.h3,{id:"update-on-input",children:"Update on Input"}),"\n",(0,i.jsxs)(n.p,{children:["When you pass a function as the second argument of ",(0,i.jsx)(n.code,{children:"arg"}),", you can take the current ",(0,i.jsx)(n.code,{children:"input"})," and return a string. Kit.app will then render the results as HTML. The simplest example looks like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'await arg("Start typing", input => input)\n'})}),"\n",(0,i.jsx)(n.p,{children:"If you want to make it look a bit nicer, you can wrap the output with some HTML:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'await arg(\r\n  "Type something",\r\n  input =>\r\n    `<div class="text-3xl flex justify-center items-center p-5">\r\n${input || `Waiting for input`}\r\n</div>`\r\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Growing on the example above, here's a Celsius to Fahrenheit converter:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'let cToF = celsius => {\r\n  return (celsius * 9) / 5 + 32\r\n}\r\n\r\nawait arg(\r\n  "Enter degress in celsius",\r\n  input =>\r\n    `<div class="text-3xl flex justify-center items-center p-5">\r\n${input ? cToF(input) + "f" : `Waiting for input`}\r\n</div>`\r\n)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"git",children:"Git"}),"\n",(0,i.jsx)(n.h3,{id:"clone-git-repos-with-degit",children:"Clone Git Repos with degit"}),"\n",(0,i.jsxs)(n.p,{children:["We're developers. We clone project templates from github. ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/degit",children:"degit"})," is available on the global scope for exactly this scenario."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'let projectName = await arg("Name your project")\r\nlet targetDir = home("projects", projectName)\r\n\r\nawait degit(`https://github.com/sveltejs/template`).clone(\r\n  targetDir\r\n)\r\n\r\nedit(targetDir)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"log",children:"Log"}),"\n",(0,i.jsx)(n.h3,{id:"view-logs",children:"View Logs"}),"\n",(0,i.jsxs)(n.p,{children:["When you use ",(0,i.jsx)(n.code,{children:"console.log()"})," in a script, it writes the log out to a relative directory."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"~/.kenv/scripts/my-script.js"})}),"\n",(0,i.jsx)(n.p,{children:"will write logs to:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"~/.kenv/logs/my-script.log"})}),"\n",(0,i.jsx)(n.p,{children:"You can view the live output of a log in your terminal with:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"tail -f ~/.kenv/logs/my-script.log\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you want to watch the main log, you can use:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"tail -f ~/.kit/logs/kit.log\n"})}),"\n",(0,i.jsx)(n.h3,{id:"save-webpage-as-a-pdf",children:"Save webpage as a PDF"}),"\n",(0,i.jsx)(n.p,{children:"You can save any webpage as a PDF."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Name: Save news as PDF\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst pdfResults = await getWebpageAsPdf('https://legiblenews.com');\r\n\r\nawait writeFile(home('news.pdf'), pdfResults);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"take-screenshot-of-webpage",children:"Take screenshot of webpage"}),"\n",(0,i.jsx)(n.p,{children:"You can take a screenshot of any webpage."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Name: Take screenshot of news webpage\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst screenshotResults = await getScreenshotFromWebpage('https://legiblenews.com', {\r\n  screenshotOptions: { fullPage: true },\r\n});\r\n\r\nawait writeFile(home('news.png'), screenshotResults);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"scrape-content-from-a-webpage",children:"Scrape content from a webpage"}),"\n",(0,i.jsx)(n.p,{children:"You can scrape content from a webpage. The first time you run this, you will be prompted to install Playwright."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Name: Scrape John's pinned Github repositories\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst items = await scrapeSelector(\r\n  'https://github.com/johnlindquist',\r\n  // CSS Selector to target elements\r\n  '.pinned-item-list-item-content > div > a',\r\n  // [Optional] function to transform the elements, if omitted then `element.innerText` is returned\r\n  (element) => ({\r\n    title: element.innerText,\r\n    link: element.href,\r\n  }),\r\n  // [Optional] options\r\n  {\r\n    headless: false,\r\n    timeout: 60000,\r\n  }\r\n);\r\n\r\nlet filePath = home(`pinned-repos.md`)\r\n\r\n// `ensureReadFile` will create the file with the content\r\n// if it doesn't exist\r\nlet content = await ensureReadFile(filePath, items.map(({title, link}) => `- [${title}](${link})`).join('\\n'))\n"})}),"\n",(0,i.jsx)(n.h2,{id:"contribute",children:"Contribute"}),"\n",(0,i.jsx)(n.h2,{id:"missing-something",children:"Missing Something?"}),"\n",(0,i.jsxs)(n.p,{children:["This Guide constantly evolving. If you're missing something, ",(0,i.jsx)(n.a,{href:"https://github.com/johnlindquist/kit-docs/blob/main/GUIDE.md",children:"suggest an edit"})," to the docs or open an issue on GitHub."]}),"\n",(0,i.jsxs)(n.p,{children:["Hit ",(0,i.jsx)("kbd",{children:"Enter"})," to download the latest docs."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(6540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);