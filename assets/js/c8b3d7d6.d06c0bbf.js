"use strict";(self.webpackChunkkit_crocs=self.webpackChunkkit_crocs||[]).push([[318],{7150:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var t=n(4848),i=n(8453);const a={sidebar_position:4},o="Tips",s={id:"tips",title:"Tips",description:"Tips are a collection of answers to user questions in GitHub Discussions and our Discord organized by topic.",source:"@site/docs/tips.md",sourceDirName:".",slug:"/tips",permalink:"/kit-docs/docs/tips",draft:!1,unlisted:!1,editUrl:"https://github.com/johnlindquist/kit-docs/tree/main/kit-crocs/docusaurus.config.ts/docs/tips.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"API",permalink:"/kit-docs/docs/api"},next:{title:"Kenvs",permalink:"/kit-docs/docs/kenvs"}},l={},d=[{value:"Audio",id:"audio",level:2},{value:"Cancel Audio with Keyboard Shortcut",id:"cancel-audio-with-keyboard-shortcut",level:3},{value:"Clipboard",id:"clipboard",level:2},{value:"Format Latest Clipboard Item",id:"format-latest-clipboard-item",level:3},{value:"Data",id:"data",level:2},{value:"Database Read/Write Example",id:"database-readwrite-example",level:3},{value:"Edit the Keys and Values of an Object",id:"edit-the-keys-and-values-of-an-object",level:3},{value:"Populate db example",id:"populate-db-example",level:3},{value:"Desktop",id:"desktop",level:2},{value:"Get Active App on Mac",id:"get-active-app-on-mac",level:3},{value:"Editor",id:"editor",level:2},{value:"Append Text to Editor",id:"append-text-to-editor",level:3},{value:"Preview Markdown",id:"preview-markdown",level:3},{value:"Markdown",id:"markdown",level:2},{value:"Generate Tips.md from Scripts",id:"generate-tipsmd-from-scripts",level:3},{value:"Prompt",id:"prompt",level:2},{value:"Force a User to Pick an Option",id:"force-a-user-to-pick-an-option",level:3},{value:"Progress Panel",id:"progress-panel",level:3},{value:"Provide Contextual Search Information",id:"provide-contextual-search-information",level:3},{value:"Return to the Main Script on Escape",id:"return-to-the-main-script-on-escape",level:3},{value:"Rewind Prompts",id:"rewind-prompts",level:3},{value:"Single Keystroke Demo",id:"single-keystroke-demo",level:3},{value:"Strict Mode",id:"strict-mode",level:3},{value:"Styles",id:"styles",level:2},{value:"Adjust the CSS of Choices",id:"adjust-the-css-of-choices",level:3}];function c(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"tips",children:"Tips"}),"\n",(0,t.jsx)(r.p,{children:"Tips are a collection of answers to user questions in GitHub Discussions and our Discord organized by topic."}),"\n",(0,t.jsx)(r.h2,{id:"audio",children:"Audio"}),"\n",(0,t.jsx)(r.h3,{id:"cancel-audio-with-keyboard-shortcut",children:"Cancel Audio with Keyboard Shortcut"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'// Name: Cancel Audio with Keyboard Shortcut\r\n// Group: Audio\r\n\r\nimport "@johnlindquist/kit"\r\n\r\n// Start saying long thing\r\nsay(`I have so much to say I\'m just going to keep talking until someone shuts me up`)\r\n\r\nregisterShortcut("opt x", () => {\r\n  say("") //will cancel\r\n  process.exit() // you need to exit or else the shortcuts will keep the script active\r\n})\r\n\r\nregisterShortcut("opt y", () => {\r\n  say("You\'re done", {\r\n    name: "Alice",\r\n    rate: 0.5,\r\n    pitch: 2,\r\n  })\r\n  process.exit()\r\n})\r\n\n'})}),"\n",(0,t.jsx)(r.h2,{id:"clipboard",children:"Clipboard"}),"\n",(0,t.jsx)(r.h3,{id:"format-latest-clipboard-item",children:"Format Latest Clipboard Item"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'// Name: Format Latest Clipboard Item\r\n// Group: Clipboard\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet text = await paste()\r\nlet newText = text.replace("a", "b")\r\nawait setSelectedText(newText)\r\n\n'})}),"\n",(0,t.jsx)(r.h2,{id:"data",children:"Data"}),"\n",(0,t.jsx)(r.h3,{id:"database-readwrite-example",children:"Database Read/Write Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'// Name: Database Read/Write Example\r\n// Description: Add/remove items from a list of fruit\r\n// Group: Data\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet fruitDb = await db(["apple", "banana", "orange"])\r\n\r\nwhile (true) {\r\n  let fruitToAdd = await arg("Add a fruit", md(fruitDb.items.map(fruit => `* ${fruit}`).join("\\n")))\r\n\r\n  fruitDb.items.push(fruitToAdd)\r\n  await fruitDb.write()\r\n\r\n  let fruitToDelete = await arg("Delete a fruit", fruitDb.items)\r\n\r\n  fruitDb.items = fruitDb.items.filter(fruit => fruit !== fruitToDelete)\r\n\r\n  await fruitDb.write()\r\n}\r\n\n'})}),"\n",(0,t.jsx)(r.h3,{id:"edit-the-keys-and-values-of-an-object",children:"Edit the Keys and Values of an Object"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'// Name: Edit the Keys and Values of an Object\r\n// Group: Data\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet data = {\r\n  name: "John",\r\n  age: 42,\r\n  location: "USA",\r\n}\r\n\r\nlet result = await fields(\r\n  Object.entries(data).map(([key, value]) => ({\r\n    name: key,\r\n    label: key,\r\n    value: String(value),\r\n  }))\r\n)\r\n\r\nlet newData = Object.entries(data).map(([key], i) => ({\r\n  [key]: result[i],\r\n}))\r\n\r\ninspect(newData)\r\n\n'})}),"\n",(0,t.jsx)(r.h3,{id:"populate-db-example",children:"Populate db example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'// Name: Populate db example\r\n// Description: Shows how to pre-populate database\r\n// Group: Data\r\n\r\n// Pass in a function to generate data for the db\r\n// Because this script is named "db-basic.js"\r\n// The database is found at "~/.kenv/db/_db-basic.json"\r\n\r\nlet reposDb = await db(async () => {\r\n  let response = await get("https://api.github.com/users/johnlindquist/repos")\r\n\r\n  return response.data.map(({ name, description, html_url }) => {\r\n    return {\r\n      name,\r\n      description,\r\n      value: html_url,\r\n    }\r\n  })\r\n})\r\nlet repoUrl = await arg("Select repo to open:", reposDb.items)\r\n\r\nexec(`open "${repoUrl}"`)\r\n\n'})}),"\n",(0,t.jsx)(r.h2,{id:"desktop",children:"Desktop"}),"\n",(0,t.jsx)(r.h3,{id:"get-active-app-on-mac",children:"Get Active App on Mac"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'// Name: Get Active App on Mac\r\n// Group: Desktop\r\n\r\n// MAC ONLY!\r\nimport "@johnlindquist/kit"\r\n\r\n// Always hide immmediately if you\'re not going to show a prompt\r\nawait hide()\r\n\r\n// Note: This uses "https://www.npmjs.com/package/@johnlindquist/mac-frontmost" inside Kit.app,\r\n// but you can import that package directly (or another similar package) if you prefer\r\nlet info = await getActiveAppInfo()\r\nif (info.bundleIdentifier === "com.google.Chrome") {\r\n  await keyboard.pressKey(Key.LeftSuper, Key.T)\r\n  await keyboard.releaseKey(Key.LeftSuper, Key.T)\r\n}\r\n\n'})}),"\n",(0,t.jsx)(r.h2,{id:"editor",children:"Editor"}),"\n",(0,t.jsx)(r.h3,{id:"append-text-to-editor",children:"Append Text to Editor"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'// Name: Append Text to Editor\r\n// Group: Editor\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet sentence = `This is a sentence that will be appended to the editor.`\r\nlet words = sentence.split(" ")\r\n\r\nsetInterval(() => {\r\n  let word = words.shift()\r\n  if (word) {\r\n    editor.append(word + " ")\r\n  }\r\n}, 100)\r\n\r\nawait editor({\r\n  lineNumbers: "on",\r\n  fontFamily: "Menlo",\r\n})\r\n\n'})}),"\n",(0,t.jsx)(r.h3,{id:"preview-markdown",children:"Preview Markdown"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'// Name: Preview Markdown\r\n// Group: Editor\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet value = `\r\n# Hello World\r\n\r\n## Markdown Features\r\n\r\nHere are some examples of markdown features:\r\n\r\n- **Bold Text**\r\n- *Italic Text*\r\n- \\`Inline Code\\`\r\n\r\n1. First item in a numbered list\r\n2. Second item in a numbered list\r\n\r\n> Blockquote\r\n\r\n![Image Alt Text](https://example.com/image.jpg "Image Title")\r\n\r\n~~~javascript\r\nconsole.log("Code block with syntax highlighting");\r\n~~~\r\n\r\nHere is a table:\r\n\r\n| Header 1 | Header 2 |\r\n| -------- | -------- |\r\n| Row 1 Col 1 | Row 1 Col 2 |\r\n| Row 2 Col 1 | Row 2 Col 2 |\r\n`.trim()\r\n\r\nawait editor({\r\n  value,\r\n  onInput: async input => {\r\n    setPreview(md(input))\r\n  },\r\n})\r\n\n'})}),"\n",(0,t.jsx)(r.h2,{id:"markdown",children:"Markdown"}),"\n",(0,t.jsx)(r.h3,{id:"generate-tipsmd-from-scripts",children:"Generate Tips.md from Scripts"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'// Name: Generate Tips.md from Scripts\r\n// Group: Markdown\r\n\r\nimport { Script } from "@johnlindquist/kit"\r\n\r\nlet scripts = await getScripts()\r\n\r\n// Check if kit-docs is a kenv\r\n\r\nlet kenv = path.basename(projectPath())\r\nlet isKitDocsInAKenv = kenv !== ".kenv"\r\nlet outFilePath = projectPath("TIPS.md")\r\n\r\nif (isKitDocsInAKenv) {\r\n  scripts = scripts.filter(script => script.kenv === kenv)\r\n}\r\n\r\nscripts.sort((a, b) => a.group.localeCompare(b.group))\r\n\r\n// Group by group\r\nlet groups: {\r\n  [key: string]: Script[]\r\n} = {}\r\nfor (let script of scripts) {\r\n  if (!groups[script.group]) groups[script.group] = []\r\n  groups[script.group].push(script)\r\n}\r\n\r\n// Convert Groups into Markdown h2\'s with the Content Below\r\nlet markdownBody = ``\r\nfor (let [group, scripts] of Object.entries(groups)) {\r\n  markdownBody += `## ${group}\\n\\n`\r\n  for (let script of scripts.sort((a, b) => a.name.localeCompare(b.name))) {\r\n    let content = await readFile(script.filePath, "utf8")\r\n    markdownBody += `### ${script.name}\\n\\n`\r\n    markdownBody += "```ts\\n"\r\n    markdownBody += content\r\n    markdownBody += "\\n```\\n\\n"\r\n  }\r\n}\r\n\r\nlet markdown = `# Tips\r\n\r\nTips are a collection of answers to user questions in GitHub Discussions and our Discord organized by topic.\r\n\r\n${markdownBody}\r\n`.trim()\r\n\r\nawait writeFile(outFilePath, markdown)\r\n\n'})}),"\n",(0,t.jsx)(r.h2,{id:"prompt",children:"Prompt"}),"\n",(0,t.jsx)(r.h3,{id:"force-a-user-to-pick-an-option",children:"Force a User to Pick an Option"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'// Name: Force a User to Pick an Option\r\n// Group: Prompt\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet animals = ["dog", "cat", "rabbit", "horse", "elephant"]\r\nlet secondsRemaining = 3\r\nlet getHint = secondsRemaining => `Hurry! You only have ${secondsRemaining} seconds to choose an animal...`\r\n\r\nlet animal = ""\r\n\r\nanimal = await arg(\r\n  {\r\n    hint: getHint(secondsRemaining),\r\n    onInit: async () => {\r\n      while (secondsRemaining > 0 && !animal) {\r\n        setHint(getHint(secondsRemaining))\r\n        await wait(1000)\r\n        secondsRemaining--\r\n      }\r\n\r\n      if (!animal) exit()\r\n    },\r\n  },\r\n  animals\r\n)\r\n\r\nawait div(md(`# Phew! You made it! You chose ${animal}`))\r\n\n'})}),"\n",(0,t.jsx)(r.h3,{id:"progress-panel",children:"Progress Panel"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'// Name: Progress Panel\r\n// Group: Prompt\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet first = ""\r\nlet second = ""\r\nlet third = ""\r\nlet progressPanel = () =>\r\n  md(`# Progress: \r\n- ${first || "Waiting first value"}\r\n- ${second || "Waiting second value"}\r\n- ${third || "Waiting third value"}\r\n`)\r\n\r\nfirst = await arg("Enter the first value", progressPanel)\r\nsecond = await arg("Enter the second value", progressPanel)\r\nthird = await arg("Enter the third value", progressPanel)\r\n\r\nawait div(\r\n  md(`# You entered:\r\n- ${first}\r\n- ${second}\r\n- ${third}\r\n`)\r\n)\r\n\n'})}),"\n",(0,t.jsx)(r.h3,{id:"provide-contextual-search-information",children:"Provide Contextual Search Information"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'// Name: Provide Contextual Search Information\r\n// Group: Prompt\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet choices = [\r\n  {\r\n    // Always show\r\n    name: "Please contact support if you don\'t see your fruit",\r\n    info: true,\r\n  },\r\n  {\r\n    // Only show when there are no results\r\n    name: "No fruits match your search",\r\n    miss: true,\r\n  },\r\n  "apple",\r\n  "banana",\r\n  "orange",\r\n]\r\nawait arg(\r\n  {\r\n    placeholder: "Select a fruit for your basket",\r\n    enter: "Checkout",\r\n  },\r\n  choices\r\n)\r\n\n'})}),"\n",(0,t.jsx)(r.h3,{id:"return-to-the-main-script-on-escape",children:"Return to the Main Script on Escape"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'// Name: Return to the Main Script on Escape\r\n// Group: Prompt\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nawait div({\r\n  html: md(`# Hello`),\r\n  shortcuts: [\r\n    {\r\n      key: "escape",\r\n      onPress: async () => {\r\n        await mainScript()\r\n      },\r\n    },\r\n  ],\r\n})\r\n\n'})}),"\n",(0,t.jsx)(r.h3,{id:"rewind-prompts",children:"Rewind Prompts"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'// Name: Rewind Prompts\r\n// Group: Prompt\r\n\r\nimport { Shortcut } from "@johnlindquist/kit"\r\n\r\nlet currentStep = 0\r\nlet direction = 1\r\n\r\nlet shortcuts: Shortcut[] = [\r\n  {\r\n    key: "escape",\r\n    onPress: async () => {\r\n      submit("")\r\n    },\r\n  },\r\n]\r\n\r\nlet step1 = async () =>\r\n  await arg({\r\n    placeholder: "one",\r\n    shortcuts,\r\n  })\r\n\r\nlet step2 = async () =>\r\n  await arg({\r\n    placeholder: "two",\r\n    shortcuts,\r\n  })\r\n\r\nlet step3 = async () =>\r\n  await arg({\r\n    placeholder: "three",\r\n    shortcuts,\r\n  })\r\n\r\nlet steps = [\r\n  { prompt: step1, value: "" },\r\n  { prompt: step2, value: "" },\r\n  { prompt: step3, value: "" },\r\n]\r\n\r\nwhile (currentStep < steps.length) {\r\n  let step = steps[currentStep]\r\n  step.value = await step.prompt()\r\n  direction = step.value ? 1 : -1\r\n  currentStep += direction\r\n  if (currentStep < 0) {\r\n    exit() // Pressing escape on the first prompt will exit the script\r\n  }\r\n}\r\n\r\ninspect(steps)\r\n\n'})}),"\n",(0,t.jsx)(r.h3,{id:"single-keystroke-demo",children:"Single Keystroke Demo"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'// Name: Single Keystroke Demo\r\n// Group: Prompt\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet choice = await arg({\r\n  placeholder: "Choose a color",\r\n  choices: [\r\n    { name: "[R]ed", value: "red" },\r\n    { name: "[G]reen", value: "green" },\r\n    { name: "[B]lue", value: "blue" },\r\n  ],\r\n})\r\n\r\nawait div(md(`You chose ${choice}`))\r\n\n'})}),"\n",(0,t.jsx)(r.h3,{id:"strict-mode",children:"Strict Mode"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'// Name: Strict Mode\r\n// Group: Prompt\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet fruit = await arg(\r\n  {\r\n    placeholder: "Select a fruit",\r\n    hint: "Type \'Grape\' and hit enter",\r\n    strict: false,\r\n  },\r\n  ["Apple", "Banana", "Cherry"]\r\n)\r\n\r\nawait div(md(fruit))\r\n\n'})}),"\n",(0,t.jsx)(r.h2,{id:"styles",children:"Styles"}),"\n",(0,t.jsx)(r.h3,{id:"adjust-the-css-of-choices",children:"Adjust the CSS of Choices"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'// Name: Adjust the CSS of Choices\r\n// Group: Styles\r\n\r\nimport "@johnlindquist/kit"\r\n\r\nlet choice = await arg({\r\n  css: `\r\n.light-purple {\r\n  background-color: #c8a2c8;\r\n}  \r\n.medium-purple {\r\n  background-color: #967bb6;\r\n}\r\n.dark-purple {\r\n  background-color: #5d4777;\r\n}\r\n\r\n.focused {\r\n  box-shadow: inset .5rem 0 0 0 #ffffffee;\r\n}\r\n  `,\r\n  placeholder: "Choose a shade of purple",\r\n  choices: [\r\n    { name: "[L]ight Purple", value: "light-purple", className: "light-purple", focusedClassName: "focused" },\r\n    { name: "[M]edium Purple", value: "medium-purple", className: "medium-purple", focusedClassName: "focused" },\r\n    { name: "[D]ark Purple", value: "dark-purple", className: "dark-purple", focusedClassName: "focused" },\r\n  ],\r\n})\r\n\r\nawait div(md(`You chose ${choice}`))\r\n\n'})})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>s});var t=n(6540);const i={},a=t.createContext(i);function o(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);